<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Slamdunk&#039;s Blog]]></title>
    <link href="https://slamdunk.github.io/blog/tags/php.xml" rel="self"/>
    <link href="https://slamdunk.github.io/"/>
    <updated>2018-05-02T08:33:42+02:00</updated>
    <id>https://slamdunk.github.io/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Why not to use set_error_handler]]></title>
            <link href="https://slamdunk.github.io/blog/why-not-to-use-set-error-handler/"/>
            <updated>2017-10-12T00:00:00+02:00</updated>
            <id>https://slamdunk.github.io/blog/why-not-to-use-set-error-handler/</id>
            <content type="html"><![CDATA[<p><strong>TL;DR</strong> When an error raises, the final restore_error_handler() isn't called.
Move to error_get_last() with @.</p>

<p>If I search for <a href="https://secure.php.net/manual/en/function.set-error-handler.php">set_error_handler</a> usage in my <code>vendor/</code> folder I find almost
a hundred sources using it. All major frameworks use it (ZendFramework,
Symfony, Doctrine, [...]) and for a good reason.</p>

<p>PHP functions in case of bad
behaviour raise errors like an <code>E_WARNING</code> and libraries want and need to handle
them in a manageble way.</p>

<p>For example we may know that in a specific library an error can occur frequently
because the input is not predictable nor standard, but you don't want to block
the entire program flow.</p>

<p>In this case, the library wraps the native PHP function around a <a href="https://secure.php.net/manual/en/function.set-error-handler.php">set_error_handler</a>
and a <a href="https://secure.php.net/manual/en/function.restore-error-handler.php">restore_error_handler</a>, and if something goes wrong the error is wrapped
in a specific library Exception:</p>

<pre><code class="php">class FancyLibrary
{
    public static function decode($text, $fromCharset)
    {
        set_error_handler(function ($nr, $message) {
            throw new FancyException('WUT? ' . $message);
        });

        $decodedText = iconv($fromCharset, 'UTF-8', $text);

        restore_error_handler();

        return $decodedText;
    }
}
</code></pre>

<p>So if it ever occurs that the user needs to handle the error in a non-blocking
way, simply catch the library specific Exception:</p>

<pre><code class="php">try {
    $decodeText = FancyLibrary::decode('foo', 'l33t_encoding');
} catch (FancyException $ex) {
    $decodeText = 'never_mind';
}
</code></pre>

<p>This seems ok, but has a fatal flaw: the <a href="https://secure.php.net/manual/en/function.restore-error-handler.php">restore_error_handler</a> is never called!</p>

<p>All subsequent PHP errors will retain the FancyLibrary error handler:</p>

<pre><code class="php">try {
    $decodeText = FancyLibrary::decode('foo', 'l33t_encoding');
} catch (FancyException $ex) {
    $decodeText = 'never_mind';
}

$bar = explode([], []);
// Expected result:     Warning: explode() expects parameter 1 to be string, array given
// Actual result:       Fatal error: Uncaught FancyException: WUT? explode() expects parameter 1 to be string, array given
</code></pre>

<p>Live code example: <a href="https://3v4l.org/5kmYF">https://3v4l.org/5kmYF</a></p>

<p>In this specific example no other error handler is involved, but in a modern
application the app would have previously set a generic error-to-exception
error handler that would have never been called again, because after the
first FancyLibrary error, FancyLibrary error handler becomes the active one.</p>

<p>This behaviour is very sneaky:</p>

<ol>
<li>The program behaviour is different if an error occurs or not in the library</li>
<li>The user can't do anything: it we try to manually call <a href="https://secure.php.net/manual/en/function.restore-error-handler.php">restore_error_handler</a>
in the <code>catch</code>, we could reset our own error handler if the library ever decides
to not use <a href="https://secure.php.net/manual/en/function.set-error-handler.php">set_error_handler</a> anymore</li>
</ol>

<p>A possible solution is to use <a href="https://secure.php.net/manual/en/function.error-get-last.php">error_get_last</a> along with <a href="https://secure.php.net/manual/en/language.operators.errorcontrol.php">@ error control operator</a>:</p>

<pre><code class="php">class FancyLibrary
{
    public static function decode($text, $fromCharset)
    {
        error_clear_last();

        $decodedText = @ iconv($fromCharset, 'UTF-8', $text);

        if (null !== ($lastError = error_get_last())) {
            throw new FancyException('WUT? ' . $lastError['message']);
        }

        return $decodedText;
    }
}
</code></pre>

<p>Live code example: <a href="https://3v4l.org/rXdMi">https://3v4l.org/rXdMi</a></p>

<p>We now gained a predictable and consistent behaviour for our library, but still
not everything that glitters is gold: the <a href="https://secure.php.net/manual/en/language.operators.errorcontrol.php">@ error control operator</a> triggers
a previously set error handler (second paragraph of manual page):</p>

<pre><code class="php">set_error_handler(function ($nr, $message) {
    throw new \Exception('WUT? ' . $message);
});

$bar = @ explode([], []);
</code></pre>

<p>Live code example: <a href="https://3v4l.org/jfW8u">https://3v4l.org/jfW8u</a></p>

<p>So we could end up catching the library specific error that was intended to be
silenced.</p>

<p>Live code example: <a href="https://3v4l.org/0l1nb">https://3v4l.org/0l1nb</a></p>

<p>The solution is to take care of errors triggered with the <a href="https://secure.php.net/manual/en/language.operators.errorcontrol.php">@ error control operator</a>
in our application calling <a href="https://secure.php.net/manual/en/function.error-reporting.php">error_reporting</a>, that in this specific context changes
its returned value:</p>

<pre><code class="php">error_reporting(E_ALL);

var_dump(E_ALL === error_reporting());

set_error_handler(function ($nr, $message) {
    if (0 === error_reporting()) {
        return;
    }

    throw new \Exception('WUT? ' . $message);
});

$bar = @ explode([], []);
// No error raised

var_dump(E_ALL === error_reporting());
</code></pre>

<p>Live code example: <a href="https://3v4l.org/TpsUf">https://3v4l.org/TpsUf</a></p>

<p>At the end of the story:</p>

<ol>
<li>Libraries should move to <a href="https://secure.php.net/manual/en/function.error-get-last.php">error_get_last</a> along with <a href="https://secure.php.net/manual/en/language.operators.errorcontrol.php">@ error control operator</a></li>
<li>Users should pay attention to check <code>0 === error_reporting()</code> in their
own app-specific error handlers</li>
</ol>

<p>All combined together we get a predictable and sane behaviour.</p>

<p>Live code example: <a href="https://3v4l.org/4aADU">https://3v4l.org/4aADU</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[When to declare methods final]]></title>
            <link href="https://slamdunk.github.io/blog/when-to-declare-methods-final/"/>
            <updated>2017-04-04T00:00:00+02:00</updated>
            <id>https://slamdunk.github.io/blog/when-to-declare-methods-final/</id>
            <content type="html"><![CDATA[<p><strong>TL;DR</strong> Every method in abstract classes should be final.</p>

<p>I am stupid and I want to understand each and every functionality of a piece of
code in one screen.</p>

<p>Every time I see a class extending another class I get confused:</p>

<ol>
<li>what do this class use of parent class?</li>
<li>how much parent behaviour is overridden and how much is genuine?</li>
<li>[all other well-known composition-over-inheritance debate]</li>
</ol>

<p>I am bored to be confused, so after reading <a href="https://twitter.com/Ocramius">Ocramius</a> article "<a href="https://ocramius.github.io/blog/when-to-declare-classes-final/">When to declare classes final</a>"
I ended up writing a custom <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP-CS-Fixer</a> fixer that puts <code>final</code> keyword
on every non-abstract class - <a href="https://github.com/Slamdunk/php-cs-fixer-extensions/blob/master/lib/FinalInternalClassFixer.php">FinalInternalClassFixer</a> (except for
<a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/architecture.html#entities">Doctrine Entities</a> that relay on inheritance for proxying, grrrrr!).</p>

<p>Of course this does not delete <code>abstract</code> classes, but at least I gained that:</p>

<ol>
<li>if I see a typehint against an <code>interface</code>, I know that the variable typehinted
can be anything (of that interface)</li>
<li>if I see a typehint against an <code>abstract</code> class, I know that the variable
typehinted may have multiple behaviours (withing the abstract class)</li>
<li>if I see a typehint against a real <code>class</code>, I know that the variable
typehinted have exactly the class (and its parents) behaviour: no other class
involved</li>
<li>Inheritance may happen only with abstract classes: trivial, but important</li>
</ol>

<p>Still, a typehint on abstract classes exposes an undefined behaviour until you
read every implementation class along with the abstract one.</p>

<h2 id="inheritance-is-unnecessary%2C-but-if-you-use-it%2C-make-it-final">Inheritance is unnecessary, but if you use it, make it final</h2>

<p>Good interface abstraction and composition are enough for every scenario, but
may be verbose.</p>

<p>The only use case I find inheritance <em>acceptable</em> is to enforce a part of a
behaviour that would be too verbose to write otherwise.</p>

<p><a href="https://en.wikipedia.org/wiki/Template_method_pattern">Template method pattern</a> is the way to adhere to an interface specifying only
a part of the full behaviour, letting a subclass the rest of it.</p>

<pre><code class="php">interface Employee
{
    public function work();
    public function relax();
}

final class Secretary implements Employee
{
    public function work()
    {
        echo "I'm switching on the PC";
    }

    public function relax()
    {
        echo "Having a coffee";
    }
}

abstract class Operative implements Employee
{
    final public function work()
    {
        // Here we are: half behaviour enforced due to final keyword
        echo "Protective clothes worn";

        // The other half delegated to subclass due to internal interface
        $this-&gt;getHandsDirty();
    }

    abstract protected function getHandsDirty();
}

final class Lumberjack extends Operative
{
    protected function getHandsDirty()
    {
        echo "Got the chainsaw";
    }

    public function relax()
    {
        echo "Sunbathing";
    }
}
</code></pre>

<p>A Secretary doesn't need protective clothes, while an Operative must wear them.</p>

<p>In respect of a scenario that I would consider ideal, the example shows some
flaws:</p>

<ol>
<li><code>Employee</code> interface hides a security-related behaviour (wearing or
not the protective clothes) that is still hidden</li>
<li>creates a new hidden, although internal, API (<code>getHandsDirty</code>)</li>
</ol>

<p><strong>But</strong> at least all the intentions behind <code>Operative</code> abstract class is entirely
in its code and can't be overwritten.</p>

<p><code>Lumberjack</code> will always expose a behaviour that is the result of two classes,
which is bad, <strong>but</strong> al least the two classes have strictly separated and
distinguishable behaviours, which is good.</p>

<p>If you are going to move from an inheritance nightmare to a composition/clear-API
heaven, the first step for sure is to segregate responsibilities between parents
and children.</p>

<p>I wrote another fixer for this purpose, <a href="https://github.com/Slamdunk/php-cs-fixer-extensions/blob/master/lib/FinalAbstractPublicFixer.php">FinalAbstractPublicFixer</a>, to make sure
no developer in the team can fall again in that bad design.</p>
]]></content>
        </entry>
    </feed>