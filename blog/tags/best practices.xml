<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Slamdunk&#039;s Blog]]></title>
    <link href="https://slamdunk.github.io/blog/tags/best practices.xml" rel="self"/>
    <link href="https://slamdunk.github.io/"/>
    <updated>2017-05-12T16:29:34+02:00</updated>
    <id>https://slamdunk.github.io/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[When to declare methods final]]></title>
            <link href="https://slamdunk.github.io/blog/when-to-declare-methods-final/"/>
            <updated>2017-04-04T00:00:00+02:00</updated>
            <id>https://slamdunk.github.io/blog/when-to-declare-methods-final/</id>
            <content type="html"><![CDATA[<p><strong>TL;DR</strong> Every method in abstract classes should be final.</p>

<p>I am stupid and I want to understand each and every functionality of a piece of
code in one screen.</p>

<p>Every time I see a class extending another class I get confused:</p>

<ol>
<li>what do this class use of parent class?</li>
<li>how much parent behaviour is overridden and how much is genuine?</li>
<li>[all other well-known composition-over-inheritance debate]</li>
</ol>

<p>I am bored to be confused, so after reading <a href="https://twitter.com/Ocramius">Ocramius</a> article "<a href="https://ocramius.github.io/blog/when-to-declare-classes-final/">When to declare classes final</a>"
I ended up writing a custom <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP-CS-Fixer</a> fixer that puts <code>final</code> keyword
on every non-abstract class - <a href="https://github.com/Slamdunk/php-cs-fixer-extensions/blob/v1.0.1/lib/FinalInternalClassFixer.php">FinalInternalClassFixer</a> (except for
<a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/architecture.html#entities">Doctrine Entities</a> that relay on inheritance for proxying, grrrrr!).</p>

<p>Of course this does not delete <code>abstract</code> classes, but at least I gained that:</p>

<ol>
<li>if I see a typehint against an <code>interface</code>, I know that the variable typehinted
can be anything (of that interface)</li>
<li>if I see a typehint against an <code>abstract</code> class, I know that the variable
typehinted may have multiple behaviours (withing the abstract class)</li>
<li>if I see a typehint against a real <code>class</code>, I know that the variable
typehinted have exactly the class (and its parents) behaviour: no other class
involved</li>
<li>Inheritance may happen only with abstract classes: trivial, but important</li>
</ol>

<p>Still, a typehint on abstract classes exposes an undefined behaviour until you
read every implementation class along with the abstract one.</p>

<h2 id="inheritance-is-unnecessary%2C-but-if-you-use-it%2C-make-it-final">Inheritance is unnecessary, but if you use it, make it final</h2>

<p>Good interface abstraction and composition are enough for every scenario, but
may be verbose.</p>

<p>The only use case I find inheritance <em>acceptable</em> is to enforce a part of a
behaviour that would be too verbose to write otherwise.</p>

<p><a href="https://en.wikipedia.org/wiki/Template_method_pattern">Template method pattern</a> is the way to adhere to an interface specifying only
a part of the full behaviour, letting a subclass the rest of it.</p>

<pre><code class="php">interface Employee
{
    public function work();
    public function relax();
}

final class Secretary implements Employee
{
    public function work()
    {
        echo "I'm switching on the PC";
    }

    public function relax()
    {
        echo "Having a coffee";
    }
}

abstract class Operative implements Employee
{
    final public function work()
    {
        // Here we are: half behaviour enforced due to final keyword
        echo "Protective clothes worn";

        // The other half delegated to subclass due to internal interface
        $this-&gt;getHandsDirty();
    }

    abstract protected function getHandsDirty();
}

final class Lumberjack extends Operative
{
    protected function getHandsDirty()
    {
        echo "Got the chainsaw";
    }

    public function relax()
    {
        echo "Sunbathing";
    }
}
</code></pre>

<p>A Secretary doesn't need protective clothes, while an Operative must wear them.</p>

<p>In respect of a scenario that I would consider ideal, the example shows some
flaws:</p>

<ol>
<li><code>Employee</code> interface hides a security-related behaviour (wearing or
not the protective clothes) that is still hidden</li>
<li>creates a new hidden, although internal, API (<code>getHandsDirty</code>)</li>
</ol>

<p><strong>But</strong> at least all the intentions behind <code>Operative</code> abstract class is entirely
in its code and can't be overwritten.</p>

<p><code>Lumberjack</code> will always expose a behaviour that is the result of two classes,
which is bad, <strong>but</strong> al least the two classes have strictly separated and
distinguishable behaviours, which is good.</p>

<p>If you are going to move from an inheritance nightmare to a composition/clear-API
heaven, the first step for sure is to segregate responsibilities between parents
and children.</p>

<p>I wrote another fixer for this purpose, <a href="https://github.com/Slamdunk/php-cs-fixer-extensions/blob/v1.0.1/lib/FinalAbstractPublicFixer.php">FinalAbstractPublicFixer</a> (work <em>in
fieri</em>), to make sure no developer in the team can fall again in that bad design.</p>
]]></content>
        </entry>
    </feed>